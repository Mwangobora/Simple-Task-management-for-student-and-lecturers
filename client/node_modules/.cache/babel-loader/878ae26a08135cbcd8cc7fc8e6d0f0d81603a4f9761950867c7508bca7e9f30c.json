{"ast":null,"code":"var _jsxFileName = \"/home/francis/Desktop/projects/Task ManagementSytem/client/src/Lecturers/submission.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Submissions = ({\n  taskId\n}) => {\n  _s();\n  const [submissions, setSubmissions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch submissions for the task when the component mounts\n  useEffect(() => {\n    const fetchSubmissions = async () => {\n      try {\n        // Fetch the data from the backend API\n        const response = await fetch(`http://localhost:5000/submissions/${taskId}`);\n\n        // Check if the response is ok (status 200)\n        if (!response.ok) {\n          throw new Error('Failed to fetch submissions');\n        }\n\n        // Parse the response JSON\n        const data = await response.json();\n\n        // Set the fetched submissions to state\n        setSubmissions(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error:', error);\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n\n    // Call fetchSubmissions when the component mounts\n    if (taskId) {\n      fetchSubmissions();\n    }\n  }, [taskId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading submissions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  if (submissions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No submissions found for this task.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-semibold mb-4\",\n      children: [\"Submissions for Task ID: \", taskId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n      children: submissions.map(submission => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border border-gray-300 p-4 rounded-lg shadow hover:shadow-lg transition\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-medium text-lg\",\n          children: [\"Submitted By: \", submission.submitted_by]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", submission.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Submitted On: \", new Date(submission.submission_date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `http://localhost:5000/${submission.file_path}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"text-blue-500 underline\",\n          children: \"View File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateSubmissionStatus(submission.id, 'approved'),\n            className: \"bg-green-500 text-white py-1 px-3 rounded hover:bg-green-600\",\n            children: \"Approve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateSubmissionStatus(submission.id, 'rejected'),\n            className: \"bg-red-500 text-white py-1 px-3 rounded hover:bg-red-600 ml-2\",\n            children: \"Reject\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, submission.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n// Update submission status on the backend\n_s(Submissions, \"PJ/5jdK4TeLP7Fnn6NkaZhP8qWE=\");\n_c = Submissions;\nconst updateSubmissionStatus = async (submissionId, status) => {\n  try {\n    const response = await fetch(`http://localhost:5000/submissions/${submissionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status\n      })\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      alert(data.error || 'Failed to update submission status');\n      return;\n    }\n\n    // Successfully updated status\n    alert('Submission status updated!');\n  } catch (error) {\n    console.error('Error updating submission status:', error);\n    alert('Error updating submission status');\n  }\n};\nexport default Submissions;\nvar _c;\n$RefreshReg$(_c, \"Submissions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Submissions","taskId","_s","submissions","setSubmissions","loading","setLoading","error","setError","fetchSubmissions","response","fetch","ok","Error","data","json","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","submission","submitted_by","status","Date","submission_date","toLocaleString","href","file_path","target","rel","onClick","updateSubmissionStatus","id","_c","submissionId","method","headers","body","JSON","stringify","alert","$RefreshReg$"],"sources":["/home/francis/Desktop/projects/Task ManagementSytem/client/src/Lecturers/submission.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Submissions = ({ taskId }) => {\n  const [submissions, setSubmissions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch submissions for the task when the component mounts\n  useEffect(() => {\n    const fetchSubmissions = async () => {\n      try {\n        // Fetch the data from the backend API\n        const response = await fetch(`http://localhost:5000/submissions/${taskId}`);\n        \n        // Check if the response is ok (status 200)\n        if (!response.ok) {\n          throw new Error('Failed to fetch submissions');\n        }\n\n        // Parse the response JSON\n        const data = await response.json();\n\n        // Set the fetched submissions to state\n        setSubmissions(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error:', error);\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n\n    // Call fetchSubmissions when the component mounts\n    if (taskId) {\n      fetchSubmissions();\n    }\n  }, [taskId]);\n\n  if (loading) {\n    return <p>Loading submissions...</p>;\n  }\n\n  if (error) {\n    return <p className=\"text-red-500\">{error}</p>;\n  }\n\n  if (submissions.length === 0) {\n    return <p>No submissions found for this task.</p>;\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-2xl font-semibold mb-4\">Submissions for Task ID: {taskId}</h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {submissions.map((submission) => (\n          <div\n            key={submission.id}\n            className=\"border border-gray-300 p-4 rounded-lg shadow hover:shadow-lg transition\"\n          >\n            <p className=\"font-medium text-lg\">Submitted By: {submission.submitted_by}</p>\n            <p>Status: {submission.status}</p>\n            <p>Submitted On: {new Date(submission.submission_date).toLocaleString()}</p>\n            <a\n              href={`http://localhost:5000/${submission.file_path}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-blue-500 underline\"\n            >\n              View File\n            </a>\n            <div className=\"mt-3\">\n              <button\n                onClick={() => updateSubmissionStatus(submission.id, 'approved')}\n                className=\"bg-green-500 text-white py-1 px-3 rounded hover:bg-green-600\"\n              >\n                Approve\n              </button>\n              <button\n                onClick={() => updateSubmissionStatus(submission.id, 'rejected')}\n                className=\"bg-red-500 text-white py-1 px-3 rounded hover:bg-red-600 ml-2\"\n              >\n                Reject\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Update submission status on the backend\nconst updateSubmissionStatus = async (submissionId, status) => {\n  try {\n    const response = await fetch(`http://localhost:5000/submissions/${submissionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ status }),\n    });\n\n    if (!response.ok) {\n      const data = await response.json();\n      alert(data.error || 'Failed to update submission status');\n      return;\n    }\n\n    // Successfully updated status\n    alert('Submission status updated!');\n  } catch (error) {\n    console.error('Error updating submission status:', error);\n    alert('Error updating submission status');\n  }\n};\n\nexport default Submissions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}